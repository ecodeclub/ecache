// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package ecache is a generated GoMock package.
package ecache

import (
	context "context"
	reflect "reflect"
	"testing"
	time "time"

	"github.com/ecodeclub/ecache/internal/errs"
	"github.com/ecodeclub/ekit"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

func NewMockNamespaceCache(cache *MockCache, namespace string) *NamespaceCache {
	return &NamespaceCache{
		C:         cache,
		Namespace: namespace,
	}
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// DecrBy mocks base method.
func (m *MockCache) DecrBy(ctx context.Context, key string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrBy", ctx, key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrBy indicates an expected call of DecrBy.
func (mr *MockCacheMockRecorder) DecrBy(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrBy", reflect.TypeOf((*MockCache)(nil).DecrBy), ctx, key, value)
}

// Delete mocks base method.
func (m *MockCache) Delete(ctx context.Context, key ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range key {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx interface{}, key ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, key...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key string) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(Value)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key)
}

// GetSet mocks base method.
func (m *MockCache) GetSet(ctx context.Context, key, val string) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet", ctx, key, val)
	ret0, _ := ret[0].(Value)
	return ret0
}

// GetSet indicates an expected call of GetSet.
func (mr *MockCacheMockRecorder) GetSet(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockCache)(nil).GetSet), ctx, key, val)
}

// IncrBy mocks base method.
func (m *MockCache) IncrBy(ctx context.Context, key string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", ctx, key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrBy indicates an expected call of IncrBy.
func (mr *MockCacheMockRecorder) IncrBy(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockCache)(nil).IncrBy), ctx, key, value)
}

// IncrByFloat mocks base method.
func (m *MockCache) IncrByFloat(ctx context.Context, key string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrByFloat", ctx, key, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrByFloat indicates an expected call of IncrByFloat.
func (mr *MockCacheMockRecorder) IncrByFloat(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrByFloat", reflect.TypeOf((*MockCache)(nil).IncrByFloat), ctx, key, value)
}

// LPop mocks base method.
func (m *MockCache) LPop(ctx context.Context, key string) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPop", ctx, key)
	ret0, _ := ret[0].(Value)
	return ret0
}

// LPop indicates an expected call of LPop.
func (mr *MockCacheMockRecorder) LPop(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPop", reflect.TypeOf((*MockCache)(nil).LPop), ctx, key)
}

// LPush mocks base method.
func (m *MockCache) LPush(ctx context.Context, key string, val ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range val {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPush indicates an expected call of LPush.
func (mr *MockCacheMockRecorder) LPush(ctx, key interface{}, val ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, val...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockCache)(nil).LPush), varargs...)
}

// SAdd mocks base method.
func (m *MockCache) SAdd(ctx context.Context, key string, members ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SAdd indicates an expected call of SAdd.
func (mr *MockCacheMockRecorder) SAdd(ctx, key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockCache)(nil).SAdd), varargs...)
}

// SRem mocks base method.
func (m *MockCache) SRem(ctx context.Context, key string, members ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SRem indicates an expected call of SRem.
func (mr *MockCacheMockRecorder) SRem(ctx, key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockCache)(nil).SRem), varargs...)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key string, val any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, val, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, val, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, key, val, expiration)
}

// SetNX mocks base method.
func (m *MockCache) SetNX(ctx context.Context, key string, val any, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, val, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX.
func (mr *MockCacheMockRecorder) SetNX(ctx, key, val, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockCache)(nil).SetNX), ctx, key, val, expiration)
}

// 所有测试的目的在于检验namespacecache有没有正确处理key
func TestNamespaceCache_DecrBy(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx   context.Context
		key   string
		value int64
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    int64
		wantErr bool
	}{
		{
			name: "test_decrby",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx:   context.Background(),
				key:   "key",
				value: 1,
			},
			want:    1,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().DecrBy(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.value).Return(tt.want, nil)
			got, err := c.DecrBy(tt.args.ctx, tt.args.key, tt.args.value)
			if (err != nil) != tt.wantErr {
				t.Errorf("DecrBy() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("DecrBy() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_Delete(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx context.Context
		key []string
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    int64
		wantErr bool
	}{
		{
			name: "test_delete",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx: context.Background(),
				key: []string{"key1", "key2"},
			},
			want:    1,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().Delete(tt.args.ctx, tt.fields.Namespace+tt.args.key[0], tt.fields.Namespace+tt.args.key[1]).Return(tt.want, nil)
			got, err := c.Delete(tt.args.ctx, tt.args.key...)
			if (err != nil) != tt.wantErr {
				t.Errorf("Delete() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("Delete() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_GetSet(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx context.Context
		key string
		val string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   Value
	}{
		{
			name: "test_getset",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx: context.Background(),
				key: "key",
				val: "val",
			},
			want: Value{
				AnyValue: ekit.AnyValue{
					Val: "val",
					Err: nil,
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().GetSet(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.val).Return(tt.want)
			if got := c.GetSet(tt.args.ctx, tt.args.key, tt.args.val); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetSet() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_IncrBy(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx   context.Context
		key   string
		value int64
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    int64
		wantErr bool
	}{
		{
			name: "test_incrby",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx:   context.Background(),
				key:   "key",
				value: 1,
			},
			want:    1,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().IncrBy(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.value).Return(tt.want, nil)
			got, err := c.IncrBy(tt.args.ctx, tt.args.key, tt.args.value)
			if (err != nil) != tt.wantErr {
				t.Errorf("IncrBy() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("IncrBy() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_IncrByFloat(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx   context.Context
		key   string
		value float64
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    float64
		wantErr bool
	}{
		{
			name: "test_incrbyfloat",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx:   context.Background(),
				key:   "key",
				value: 1.0,
			},
			want:    1.0,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().IncrByFloat(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.value).Return(tt.want, nil)
			got, err := c.IncrByFloat(tt.args.ctx, tt.args.key, tt.args.value)
			if (err != nil) != tt.wantErr {
				t.Errorf("IncrByFloat() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("IncrByFloat() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_LPop(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx context.Context
		key string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   Value
	}{
		{
			name: "test_lpop",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx: context.Background(),
				key: "key",
			},
			want: Value{
				AnyValue: ekit.AnyValue{
					Val: "val",
					Err: nil,
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().LPop(tt.args.ctx, tt.fields.Namespace+tt.args.key).Return(tt.want)
			if got := c.LPop(tt.args.ctx, tt.args.key); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("LPop() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_LPush(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx context.Context
		key string
		val []any
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    int64
		wantErr bool
	}{
		{
			name: "test_lpush",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx: context.Background(),
				key: "key",
				val: []any{"val1", "val2"},
			},
			want:    1,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().LPush(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.val...).Return(tt.want, nil)
			got, err := c.LPush(tt.args.ctx, tt.args.key, tt.args.val...)
			if (err != nil) != tt.wantErr {
				t.Errorf("LPush() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("LPush() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_SAdd(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx     context.Context
		key     string
		members []any
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    int64
		wantErr bool
	}{
		{
			name: "test_sadd",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx:     context.Background(),
				key:     "key",
				members: []any{"member1", "member2"},
			},
			want:    1,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().SAdd(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.members...).Return(tt.want, nil)
			got, err := c.SAdd(tt.args.ctx, tt.args.key, tt.args.members...)
			if (err != nil) != tt.wantErr {
				t.Errorf("SAdd() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("SAdd() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_SRem(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx     context.Context
		key     string
		members []any
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    int64
		wantErr bool
	}{
		{
			name: "test_srem",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx:     context.Background(),
				key:     "key",
				members: []any{"member1", "member2"},
			},
			want:    1,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().SRem(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.members...).Return(tt.want, nil)
			got, err := c.SRem(tt.args.ctx, tt.args.key, tt.args.members...)
			if (err != nil) != tt.wantErr {
				t.Errorf("SRem() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("SRem() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_Set(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx        context.Context
		key        string
		val        any
		expiration time.Duration
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{
			name: "test_set",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx:        context.Background(),
				key:        "key",
				val:        "val",
				expiration: time.Second,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().Set(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.val, tt.args.expiration).Return(nil)
			if err := c.Set(tt.args.ctx, tt.args.key, tt.args.val, tt.args.expiration); (err != nil) != tt.wantErr {
				t.Errorf("Set() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestNamespaceCache_SetNX(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx        context.Context
		key        string
		val        any
		expiration time.Duration
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    bool
		wantErr bool
	}{
		{
			name: "test_setnx",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx:        context.Background(),
				key:        "key",
				val:        "val",
				expiration: time.Second,
			},
			want:    true,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			tt.fields.C.EXPECT().SetNX(tt.args.ctx, tt.fields.Namespace+tt.args.key, tt.args.val, tt.args.expiration).Return(tt.want, nil)
			got, err := c.SetNX(tt.args.ctx, tt.args.key, tt.args.val, tt.args.expiration)
			if (err != nil) != tt.wantErr {
				t.Errorf("SetNX() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("SetNX() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestValue_KeyNotFound(t *testing.T) {
	type fields struct {
		AnyValue ekit.AnyValue
	}
	tests := []struct {
		name   string
		fields fields
		want   bool
	}{
		{
			name: "test_key_not_found",
			fields: fields{
				AnyValue: ekit.AnyValue{
					Val: nil,
					Err: errs.ErrKeyNotExist,
				},
			},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			v := Value{
				AnyValue: tt.fields.AnyValue,
			}
			if got := v.KeyNotFound(); got != tt.want {
				t.Errorf("KeyNotFound() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNamespaceCache_Get(t *testing.T) {
	type fields struct {
		C         *MockCache
		Namespace string
	}
	type args struct {
		ctx context.Context
		key string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   Value
	}{
		{
			name: "test_get",
			fields: fields{
				C:         NewMockCache(gomock.NewController(t)),
				Namespace: "app1:",
			},
			args: args{
				ctx: context.Background(),
				key: "key",
			},
			want: Value{
				AnyValue: ekit.AnyValue{
					Val: nil,
					Err: nil,
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.fields.C.EXPECT().Get(tt.args.ctx, tt.fields.Namespace+tt.args.key).Return(tt.want)
			c := &NamespaceCache{
				C:         tt.fields.C,
				Namespace: tt.fields.Namespace,
			}
			if got := c.Get(tt.args.ctx, tt.args.key); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Get() = %v, want %v", got, tt.want)
			}
		})
	}
}
