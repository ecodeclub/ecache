// Copyright 2023 ecodeclub
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hashicorp/golang-lru/v2@v2.0.6/simplelru (interfaces: LRUCache[K comparable, V any])

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLRUCache is a mock of LRUCache interface.
type MockLRUCache[K comparable, V any] struct {
	ctrl     *gomock.Controller
	recorder *MockLRUCacheMockRecorder[K, V]
}

// MockLRUCacheMockRecorder is the mock recorder for MockLRUCache.
type MockLRUCacheMockRecorder[K comparable, V any] struct {
	mock *MockLRUCache[K, V]
}

// NewMockLRUCache creates a new mock instance.
func NewMockLRUCache[K comparable, V any](ctrl *gomock.Controller) *MockLRUCache[K, V] {
	mock := &MockLRUCache[K, V]{ctrl: ctrl}
	mock.recorder = &MockLRUCacheMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLRUCache[K, V]) EXPECT() *MockLRUCacheMockRecorder[K, V] {
	return m.recorder
}

// Add mocks base method.
func (m *MockLRUCache[K, V]) Add(key K, value V) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockLRUCacheMockRecorder[K, V]) Add(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLRUCache[K, V])(nil).Add), key, value)
}

// Contains mocks base method.
func (m *MockLRUCache[K, V]) Contains(key K) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockLRUCacheMockRecorder[K, V]) Contains(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockLRUCache[K, V])(nil).Contains), key)
}

// Get mocks base method.
func (m *MockLRUCache[K, V]) Get(key K) (V, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLRUCacheMockRecorder[K, V]) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLRUCache[K, V])(nil).Get), key)
}

// GetOldest mocks base method.
func (m *MockLRUCache[K, V]) GetOldest() (K, V, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOldest")
	ret0, _ := ret[0].(K)
	ret1, _ := ret[1].(V)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetOldest indicates an expected call of GetOldest.
func (mr *MockLRUCacheMockRecorder[K, V]) GetOldest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldest", reflect.TypeOf((*MockLRUCache[K, V])(nil).GetOldest))
}

// Keys mocks base method.
func (m *MockLRUCache[K, V]) Keys() []K {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]K)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockLRUCacheMockRecorder[K, V]) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockLRUCache[K, V])(nil).Keys))
}

// Len mocks base method.
func (m *MockLRUCache[K, V]) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockLRUCacheMockRecorder[K, V]) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockLRUCache[K, V])(nil).Len))
}

// Peek mocks base method.
func (m *MockLRUCache[K, V]) Peek(key K) (V, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek", key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Peek indicates an expected call of Peek.
func (mr *MockLRUCacheMockRecorder[K, V]) Peek(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockLRUCache[K, V])(nil).Peek), key)
}

// Purge mocks base method.
func (m *MockLRUCache[K, V]) Purge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Purge")
}

// Purge indicates an expected call of Purge.
func (mr *MockLRUCacheMockRecorder[K, V]) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockLRUCache[K, V])(nil).Purge))
}

// Remove mocks base method.
func (m *MockLRUCache[K, V]) Remove(key K) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockLRUCacheMockRecorder[K, V]) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockLRUCache[K, V])(nil).Remove), key)
}

// RemoveOldest mocks base method.
func (m *MockLRUCache[K, V]) RemoveOldest() (K, V, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOldest")
	ret0, _ := ret[0].(K)
	ret1, _ := ret[1].(V)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// RemoveOldest indicates an expected call of RemoveOldest.
func (mr *MockLRUCacheMockRecorder[K, V]) RemoveOldest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOldest", reflect.TypeOf((*MockLRUCache[K, V])(nil).RemoveOldest))
}

// Resize mocks base method.
func (m *MockLRUCache[K, V]) Resize(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Resize indicates an expected call of Resize.
func (mr *MockLRUCacheMockRecorder[K, V]) Resize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockLRUCache[K, V])(nil).Resize), arg0)
}

// Values mocks base method.
func (m *MockLRUCache[K, V]) Values() []V {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]V)
	return ret0
}

// Values indicates an expected call of Values.
func (mr *MockLRUCacheMockRecorder[K, V]) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockLRUCache[K, V])(nil).Values))
}
